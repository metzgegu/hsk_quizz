const pinyin = {
  v: [
    'a',
    'ai',
    'ao',
    'an',
    'ang',
    'o',
    'ong',
    'ou',
    'e',
    'ei',
    'en',
    'eng',
    'er',
    'i',
    'ia',
    'iao',
    'ie',
    'iu',
    'ian',
    'iang',
    'in',
    'ing',
    'iong',
    'u',
    'ua',
    'uo',
    'ui',
    'uai',
    'uan',
    'un',
    'uang',
    'ü',
    'üe',
    'üan',
    'ün',
  ],
  c: [
    'b',
    'p',
    'm',
    'f',
    'd',
    't',
    'n',
    'l',
    'g',
    'k',
    'h',
    'j',
    'q',
    'x',
    'zh',
    'ch',
    'sh',
    'r',
    'z',
    'c',
    's',
    'y',
    'w',
  ],
  included: [
    'a',
    'ai',
    'ao',
    'an',
    'ang',
    'o',
    'ong',
    'ou',
    'e',
    'ei',
    'en',
    'eng',
    'er',
    'i',
    'ia',
    'iao',
    'ie',
    'iu',
    'ian',
    'iang',
    'in',
    'ing',
    'iong',
    'u',
    'ua',
    'uo',
    'ui',
    'uai',
    'uan',
    'un',
    'uang',
    'ü',
    'üe',
    'üan',
    'ün',
    'b',
    'ba',
    'bai',
    'bao',
    'ban',
    'bang',
    'bo',
    'bei',
    'ben',
    'beng',
    'bi',
    'biao',
    'bie',
    'bian',
    'bin',
    'bing',
    'bu',
    'p',
    'pa',
    'pai',
    'pao',
    'pan',
    'pang',
    'po',
    'pou',
    'pei',
    'pen',
    'peng',
    'pi',
    'piao',
    'pie',
    'pian',
    'pin',
    'ping',
    'pu',
    'm',
    'ma',
    'mai',
    'mao',
    'man',
    'mang',
    'mo',
    'mou',
    'mei',
    'men',
    'meng',
    'mi',
    'miao',
    'mie',
    'miu',
    'mian',
    'min',
    'ming',
    'mu',
    'f',
    'fa',
    'fan',
    'fang',
    'fo',
    'fou',
    'fei',
    'fen',
    'feng',
    'fu',
    'd',
    'da',
    'dai',
    'dao',
    'dan',
    'dang',
    'dong',
    'dou',
    'de',
    'dei',
    'deng',
    'di',
    'diao',
    'die',
    'diu',
    'dian',
    'ding',
    'du',
    'duo',
    'dui',
    'duan',
    'dun',
    't',
    'ta',
    'tai',
    'tao',
    'tan',
    'tang',
    'tong',
    'tou',
    'te',
    'teng',
    'ti',
    'tiao',
    'tie',
    'tian',
    'ting',
    'tu',
    'tuo',
    'tui',
    'tuan',
    'tun',
    'n',
    'na',
    'nai',
    'nao',
    'nan',
    'nang',
    'nong',
    'nou',
    'ne',
    'nei',
    'nen',
    'neng',
    'ni',
    'niao',
    'nie',
    'niu',
    'nian',
    'niang',
    'nin',
    'ning',
    'nu',
    'nuo',
    'nuan',
    'nü',
    'nüe',
    'l',
    'la',
    'lai',
    'lao',
    'lan',
    'lang',
    'long',
    'lou',
    'le',
    'lei',
    'leng',
    'li',
    'lia',
    'liao',
    'lie',
    'liu',
    'lian',
    'liang',
    'lin',
    'ling',
    'lu',
    'luo',
    'luan',
    'lun',
    'lü',
    'lüe',
    'z',
    'za',
    'zai',
    'zao',
    'zan',
    'zang',
    'zong',
    'zou',
    'ze',
    'zei',
    'zen',
    'zeng',
    'zi',
    'zu',
    'zuo',
    'zui',
    'zuan',
    'zun',
    'c',
    'ca',
    'cai',
    'cao',
    'can',
    'cang',
    'cong',
    'cou',
    'ce',
    'cen',
    'ceng',
    'ci',
    'cu',
    'cuo',
    'cui',
    'cuan',
    'cun',
    's',
    'sa',
    'sai',
    'sao',
    'san',
    'sang',
    'song',
    'sou',
    'se',
    'sen',
    'seng',
    'si',
    'su',
    'suo',
    'sui',
    'suan',
    'sun',
    'zh',
    'zha',
    'zhai',
    'zhao',
    'zhan',
    'zhang',
    'zhong',
    'zhou',
    'zhe',
    'zhei',
    'zhen',
    'zheng',
    'zhi',
    'zhu',
    'zhua',
    'zhuo',
    'zhui',
    'zhuai',
    'zhuan',
    'zhun',
    'zhuang',
    'ch',
    'cha',
    'chai',
    'chao',
    'chan',
    'chang',
    'chong',
    'chou',
    'che',
    'chen',
    'cheng',
    'chi',
    'chu',
    'chua',
    'chuo',
    'chui',
    'chuai',
    'chuan',
    'chun',
    'chuang',
    'sh',
    'sha',
    'shai',
    'shao',
    'shan',
    'shang',
    'shou',
    'she',
    'shei',
    'shen',
    'sheng',
    'shi',
    'shu',
    'shua',
    'shuo',
    'shui',
    'shuai',
    'shuan',
    'shun',
    'shuang',
    'r',
    'rao',
    'ran',
    'rang',
    'rong',
    'rou',
    're',
    'ren',
    'reng',
    'ri',
    'ru',
    'rua',
    'ruo',
    'rui',
    'ruan',
    'run',
    'g',
    'ga',
    'gai',
    'gao',
    'gan',
    'gang',
    'gong',
    'gou',
    'ge',
    'gei',
    'gen',
    'geng',
    'gu',
    'gua',
    'guo',
    'gui',
    'guai',
    'guan',
    'gun',
    'guang',
    'k',
    'ka',
    'kai',
    'kao',
    'kan',
    'kang',
    'kong',
    'kou',
    'ke',
    'kei',
    'ken',
    'keng',
    'ku',
    'kua',
    'kuo',
    'kui',
    'kuai',
    'kuan',
    'kun',
    'kuang',
    'h',
    'ha',
    'hai',
    'hao',
    'han',
    'hang',
    'hong',
    'hou',
    'he',
    'hei',
    'hen',
    'heng',
    'hu',
    'hua',
    'huo',
    'hui',
    'huai',
    'huan',
    'hun',
    'huang',
    'j',
    'ji',
    'jia',
    'jiao',
    'jie',
    'jiu',
    'jian',
    'jiang',
    'jin',
    'jing',
    'jiong',
    'ju',
    'jue',
    'juan',
    'jun',
    'q',
    'qi',
    'qia',
    'qiao',
    'qie',
    'qiu',
    'qian',
    'qiang',
    'qin',
    'qing',
    'qiong',
    'qu',
    'que',
    'quan',
    'qun',
    'x',
    'xi',
    'xia',
    'xiao',
    'xie',
    'xiu',
    'xian',
    'xiang',
    'xin',
    'xing',
    'xiong',
    'xu',
    'xue',
    'xuan',
    'xun',
    'w',
    'wa',
    'wai',
    'wan',
    'wang',
    'wo',
    'wei',
    'wen',
    'weng',
    'wu',
    'y',
    'ya',
    'yao',
    'yan',
    'yang',
    'yong',
    'you',
    'ye',
    'yi',
    'yin',
    'ying',
    'yu',
    'yue',
    'yuan',
    'yun',
    'a',
    'ai',
    'ao',
    'an',
    'ang',
    'o',
    'ou',
    'e',
    'ei',
    'en',
    'eng',
    'er',
  ],
}

import { useState } from 'react'
import styles from '../styles/Home.module.scss'
import { Result } from '../models/result'

export default function Hsk() {
  const getRandomInt = (max, forbiddenInt) => {
    const randomId = Math.floor(Math.random() * Math.floor(max))
    if (forbiddenInt === randomId) {
      return getRandomInt(max, forbiddenInt)
    } else {
      return randomId
    }
  }

  const [currentQuestion, setCurrentQuestion] = useState(() => {
    const pn =
      pinyin.c.at(getRandomInt(pinyin.c.length, 0)) + pinyin.v.at(getRandomInt(pinyin.v.length, 0))

    return {
      index: 0,
      expected: pinyin.included.includes(pn),
      proposals: [true, false],
      assertion:
        pinyin.c.at(getRandomInt(pinyin.c.length, 0)) +
        pinyin.v.at(getRandomInt(pinyin.v.length, 0)),
    }
  })

  const [currentResult, setCurrentResult] = useState<Result>({ responseTotal: 0, correctAnswer: 0 })
  const [lastQuestionResult, setLastQuestionResult] = useState<boolean | undefined>(undefined)

  function onResponse(exist: boolean) {
    console.log('currentQuestion.expected === exist', currentQuestion.expected === exist)
    console.log('currentResult.expected', currentQuestion.expected)
    console.log('exist', exist)

    if (currentQuestion.expected === exist) {
      setLastQuestionResult(true)
      setCurrentResult({
        responseTotal: currentResult.responseTotal + 1,
        correctAnswer: currentResult.correctAnswer + 1,
      })
    } else {
      setLastQuestionResult(false)
      setCurrentResult({ ...currentResult, responseTotal: currentResult.responseTotal + 1 })
    }
    const pn =
      pinyin.c.at(getRandomInt(pinyin.c.length, 0)) + pinyin.v.at(getRandomInt(pinyin.v.length, 0))
    setCurrentQuestion({
      index: currentQuestion.index + 1,
      expected: pinyin.included.includes(pn),
      proposals: [true, false],
      assertion: pn,
    })
  }

  return (
    <div className={styles.container}>
      <h1>Pynyin</h1>
      {currentQuestion && (
        <>
          <p>Exist or not ?</p>
          <h2>{currentQuestion.assertion}</h2>
          <ul style={{ listStyle: 'none', padding: '0' }}>
            <li style={{ marginBottom: '10px' }}>
              <button onClick={() => onResponse(true)}>Exist</button>
            </li>
            <li>
              <button onClick={() => onResponse(false)}>No exist</button>
            </li>
          </ul>
          {lastQuestionResult != undefined && (
            <h3 style={{ color: lastQuestionResult ? 'green' : 'red' }}>
              {lastQuestionResult ? 'Correct !' : 'Incorrect'}
            </h3>
          )}
          <div className={styles.result}>
            {currentResult.correctAnswer} / {currentResult.responseTotal}
          </div>
        </>
      )}
    </div>
  )
}
